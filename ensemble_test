# Ensemble Model

ticker_num = 16
window = 90
features = 6
predict_day = 5
want_rate = 5

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow import keras

ohlcv = pd.read_csv('/content/drive/MyDrive/FINANCE AI/FINANCE EXE/DATA/Filtered Data/filtered raw ohlcv.csv').to_numpy()[25:-6, 1:]
tech = pd.read_csv('/content/drive/MyDrive/FINANCE AI/FINANCE EXE/DATA/Filtered Data/tech indicator.csv').to_numpy()[:, 1:]
ohlcv = ohlcv[:, 5*ticker_num:5*(ticker_num+1)]
tech = tech[:, 6*ticker_num:6*(ticker_num+1)]

print(pd.read_csv('/content/drive/MyDrive/FINANCE AI/FINANCE EXE/DATA/Filtered Data/filtered ticker list.csv').to_numpy()[ticker_num, 1])

def to_updown_rate(data, day=1):
  target = [0 for _ in range(day)]
  for i in range(day, len(data)):
    target.append((data[i]-data[i-day])/data[i-day]*100)
  target = np.array(target).reshape(-1,1)
  return target

close = ohlcv[:, 3]

target = to_updown_rate(close, predict_day)
target_rate = target
target = target>=want_rate

test_model_list = []

data = tech

from sklearn.preprocessing import MaxAbsScaler
sc = MaxAbsScaler()
data = sc.fit_transform(data)

input_data = []
for i in range(window, len(data)+1):
  input_data.append(data[i-window:i, :])

input_data = np.array(input_data)[:-predict_day, :]
target_data = target.reshape(-1)[window+predict_day-1:]
target_rate = target_rate.reshape(-1)[window+predict_day-1:]

print(input_data.shape, target_data.shape, target_rate.shape)





from sklearn.model_selection import train_test_split
train_input, val_input, train_target, val_target, train_rate, val_rate = train_test_split(input_data, target_data, target_rate, test_size=0.1)
train_input, test_input, train_target, test_target, train_rate, test_rate = train_test_split(train_input, train_target, train_rate, test_size=0.1)

print('Target Ratio')
no = np.sum(train_target==0)
yes = np.sum(train_target==1)
print(no/(no+yes))
print('=============')
print('Val Ratio')
no = np.sum(val_target==0)
yes = np.sum(val_target==1)
print(no/(no+yes))
print('=============')

# ======================================================================

for i in range(5):
  test_model_list.append(keras.models.load_model('/content/drive/MyDrive/FINANCE AI/FINANCE EXE/MODEL/model16_'+str(i)+'.h5'))

input = keras.layers.Input(shape=(window, features))

p0 = test_model_list[0](input)
p1 = test_model_list[1](input)
p2 = test_model_list[2](input)
p3 = test_model_list[3](input)
p4 = test_model_list[4](input)

x = keras.layers.Concatenate(axis=1)([p0,p1,p2,p3,p4])
# output = keras.layers.Dense(1, activation='sigmoid')(x)

ensemble_model = keras.Model(input, x)

print(ensemble_model.summary())

ensemble_model.trainable = False

model = keras.Sequential()
model.add(ensemble_model)
model.add(keras.layers.Dense(1, activation='sigmoid'))

print(model.summary())

model.compile(loss='binary_crossentropy', optimizer='adam', metrics='accuracy')

checkpoint_cb = keras.callbacks.ModelCheckpoint('test.h5', save_best_only=True, monitor='val_accuracy')
early_stopping_cb = keras.callbacks.EarlyStopping(patience=30, restore_best_weights=True, monitor='val_accuracy')

history = model.fit(train_input, train_target, batch_size=64, epochs=400, validation_data=(val_input, val_target),
                    callbacks=[checkpoint_cb, early_stopping_cb])





plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['train', 'val'])
plt.show()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend(['train', 'val'])
plt.show()

true_zero = 0
true_one = 0
false_zero = 0
false_one = 0
for i in range(len(test_input)):
  x = test_input[i].reshape(-1,window,features)
  y = np.round(model.predict(x, verbose=0))
  if test_target[i]==0 and y==0:
    true_zero += 1
  elif test_target[i]==1 and y==1:
    true_one += 1
  elif test_target[i]==0 and y==1:
    false_one += 1
  elif test_target[i]==1 and y==0:
    false_zero += 1

print('==============================================================결과==============================================================')
print('전체 0 수 : '+str(np.sum(test_target==0)))
print('전체 1 수 : '+str(np.sum(test_target==1)))
print('진짜 0 맞춘 수 : '+str(true_zero))
print('진짜 1 맞춘 수 : '+str(true_one))
print('0인데 1로 맞춘 수 : '+str(false_one))
print('1인데 0으로 맞춘 수 : '+str(false_zero))

coin = 100
coins = [100]
index = 0
for i in range(len(test_input)):
  if i<index:
    continue
  else:
    x = test_input[i].reshape(-1,window,features)
    y = np.round(model.predict(x, verbose=0))
    if y==1:
      coin *= (100+test_rate[i])/100
      index += 6
    coins.append(coin)

print(coin)
plt.plot(coins)
plt.show()




score = 0
for i in range(len(test_target)):
  x = test_input[i].reshape(-1,window,features)
  y = np.round(model.predict(x, verbose=0))
  if y==test_target[i]:
    score += 1
yes = np.sum(test_target==1)
no = np.sum(test_target==0)
print(no/(yes+no))
print('최종 성능 : '+str(score/len(test_target)))

performance_index = []
performance_index.append(coin)
performance_index.append(score/len(test_target))
performance_index.append(history.history['loss'][-(patience_num+1)])
performance_index.append(history.history['accuracy'][-(patience_num+1)])
performance_index.append(history.history['val_loss'][-(patience_num+1)])
performance_index.append(history.history['val_accuracy'][-(patience_num+1)])
performance_index.append(true_zero/(true_zero+false_one))
performance_index.append(true_one/(true_one+false_zero))
performance_index = np.array(performance_index).reshape(1,-1)
if len(result_table)==0:
  result_table = performance_index
else:
  result_table = np.vstack((result_table, performance_index))
display(pd.DataFrame(performance_index))

model_num += 1

result_table = pd.DataFrame(result_table)
display(result_table)
result_table.to_csv('/content/drive/MyDrive/FINANCE AI/FINANCE EXE/실험결과2/Ticker['+str(ticker_num)+'] Result.csv', index=False)
