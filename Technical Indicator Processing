import numpy as np
import pandas as pd
from pykrx import stock

def make_RSI(ohlcv, days=14):
  c = ohlcv[:, 3]
  rsi_list = [0 for _ in range(days)]
  n = days+1
  for i in range(n, len(c)+1):
    this = c[i-n:i]
    up_list = []
    down_list = []
    for j in range(1, n):
      x = this[j]-this[j-1]
      if x>=0:
        up_list.append(x)
      else:
        down_list.append(abs(x))
    au = sum(up_list)/days
    ad = sum(down_list)/days
    rsi = (au+1e-7)/(au+ad+1e-7)*100
    rsi_list.append(rsi)
  rsi_list = np.array(rsi_list).reshape(-1,1)
  return rsi_list

def make_ATR(ohlcv, days=14):
  atr_list = [0 for _ in range(days)]
  n = days+1
  for i in range(n, len(ohlcv)+1):
    this = ohlcv[i-n:i, :]
    tr_list = []
    for j in range(1, n):
      tr = max((this[j,1]-this[j,2]), abs(this[j,1]-this[j-1,3]), abs(this[j,2]-this[j-1,3]))
      tr_list.append(tr)
    atr_list.append(sum(tr_list)/days)
  atr_list = np.array(atr_list).reshape(-1,1)
  return atr_list

def make_EMA(ohlcv, days=14):
  close = ohlcv[:,3]
  EMA_list = [0 for _ in range(days-1)]
  k=2/(days+1)
  for i in range(days, len(close)+1):
    if i==days:
      EMA_list.append(np.mean(close[:days]))
    else:
      EMA = close[i-1]*k+EMA_list[i-2]*(1-k)
      EMA_list.append(EMA)
  EMA_list = np.array(EMA_list).reshape(-1,1)
  return EMA_list

def make_MACD(ohlcv, day1=12, day2=26, signal_day=9, combine_MACD_signal=True):
  '''
  making MACD
  '''
  EMA_1 = make_EMA(ohlcv, day1).reshape(-1)
  EMA_2 = make_EMA(ohlcv, day2).reshape(-1)
  MACD_list = [0 for _ in range(day2-1)]
  for one, two in zip(EMA_1[day2-1:], EMA_2[day2-1:]):
    MACD_list.append(one-two)

  '''
  making MACD signal
  '''
  MACD_signal_list = [0 for _ in range(signal_day-1)]
  for i in range(signal_day, len(MACD_list)+1):
    if i==signal_day:
      MACD_signal_list.append(np.mean(MACD_list[:signal_day]))
    else:
      k=2/(signal_day+1)
      MACD_signal = MACD_list[i-1]*k+MACD_signal_list[i-2]*(1-k)
      MACD_signal_list.append(MACD_signal)
  
  MACD_list = np.array(MACD_list).reshape(-1,1)
  MACD_signal_list = np.array(MACD_signal_list).reshape(-1,1)

  '''
  set True if you want to combine MACD and signal
  '''
  if combine_MACD_signal==True:
    return np.hstack((MACD_list, MACD_signal_list))
  else:
    return MACD_list, MACD_signal_list

#########################################################

# Train Data Preparation Function

import numpy as np
import pandas as pd
from sklearn.preprocessing import MaxAbsScaler

def to_updown_rate(data, day=1):
  target = [0 for _ in range(day)]
  for i in range(day, len(data)):
    target.append((data[i]-data[i-day])/data[i-day]*100)
  target = np.array(target).reshape(-1,1)
  return target

close = ohlcv[:, 3]

target = to_updown_rate(close, predict_day)
target_rate = target
target = target>=want_rate

test_model_list = []

input_data = []
for i in range(window, len(data)+1):
  input_data.append(data[i-window:i, :])

input_data = np.array(input_data)[:-predict_day, :]
target_data = target.reshape(-1)[window+predict_day-1:]
target_rate = target_rate.reshape(-1)[window+predict_day-1:]

def prepare_train_data(tech, ohlcv, window=90, predict_day=5, want_rate=5, scaling_data=True):
  '''
  in this function, you have to use tech indicators that used in FIAI Paper.
  Else, you can't use this function
  In summary, len(tech.features) should be 6
  '''
  if len(pd.DataFrame(tech).columns) != 6:
    print('Your Tech Data should be 6 dimensions !')
  elif len(pd.DataFrame(ohlcv).columns) != 5:
    print('Check if your OHLCV is right.')
  elif len(tech) != len(ohlcv):
    print('Your input data and target data should be same length !')
  else:
    input_data = []
    if scaling_data == True:
      sc = MaxAbsScaler()
      tech = sc.fit_transform(tech)
    for i in range(window, len(tech)+1):
      input_data.append(tech[i-window:i, :])
